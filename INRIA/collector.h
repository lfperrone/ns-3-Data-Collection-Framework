/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2010 Bucknell University
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: L. Felipe Perrone (perrone@bucknell.edu)
 */

#ifndef COLLECTOR_H
#define COLLECTOR_H

#include "ns3/object.h"

// there is one collector for each probe
//
// all metadata (or rather, knowledge) of experiment
// is contained in the simulation client
//
namespace ns3 {
	
	/** This class serves two functions. First, it is a container for
	 * a collection of samples generated by a probe. Some statistical smarts
	 * are built into this container.
	 *
	 * Second, it dispatches samples to standard output, when the simulation 
	 * run doesn't use the automation framework, or to the EEM Client, when 
	 * it does. A Collector can be configured to pass through all the samples
	 * received from its probe or to "smooth out" the data by computing 
	 * statistics for moving windows.
	 */

	class Collector : public Object {
	public:
		static TypeId GetTypeId (void);

		Collector ();
		virtual ~Collector ();

		/// Running average of stored samples (Welford's one pass algorithm)
		double SampleMean();

		/// Running variance of stored samples (Welford's one pass algorithm)
		double SampleVariance();
    
		/// Number of samples stored
		long   SampleSize();

		/// Summation of all stored samples
		double SampleSum();

		/// Largest sample value stored
    double MaxSample();

		/// Smallest sample value stored
		double MinSample();

	private:
		double m_minValue;
		double m_maxValue;
		long   m_nSamples;
		double m_sum;
		double m_mean;
		double m_var;

		// the collector needs to know the id of the object that contains the
		// probe
		//
		// the collector needs to know the data type of the metric being
		// recorded; do I use template or polymorphism here?
		//
	}; // class Collector

} // namespace ns3

#endif // COLLECTOR_H
